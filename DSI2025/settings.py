"""
Django settings for DSI2025 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import dj_database_url
import os
from pathlib import Path

from dotenv import load_dotenv 
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")  # Carga tu archivo .env




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key')  # en local usa un fallback

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'


ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost 127.0.0.1').split()



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DSI2025.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DSI2025.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Configuraacion para poder hacer pruebas antes de produccion

DATABASES = {
        'default': {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
#DATABASES ['default'] = dj_database_url.parse("postgresql://dsi2025db_user:BNlJUYkICC7SpNqa0aZVabsPfv8AYdJ2@dpg-d2pai0v5r7bs739fcc70-a.oregon-postgres.render.com/dsi2025db")
DATABASES ['default'] = dj_database_url.parse("postgresql://neondb_owner:npg_xwpSoDO9F6js@ep-dawn-forest-ae3jj59y-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require")

#DATABASES ['default'] = dj_database_url.parse("postgresql://dsi2025db_user:BNlJUYkICC7SpNqa0aZVabsPfv8AYdJ2@dpg-d2pai0v5r7bs739fcc70-a.oregon-postgres.render.com/dsi2025db")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_HOST = 'smtp-relay.brevo.com' # <-- ¡Host de Brevo!
#EMAIL_PORT = 587
#EMAIL_USE_TLS = True
#EMAIL_HOST_USER = os.environ.get('BREVO_SMTP_LOGIN')
#EMAIL_HOST_PASSWORD = os.environ.get('BREVO_SMTP_KEY')


# -----------------------------
# Configuración API Brevo para recuperación de contraseña
# -----------------------------

BREVO_API_KEY = os.environ.get("BREVO_API_KEY")

EMAIL_BACKEND = "myapp.backends.brevo_backend.BrevoEmailBackend"
DEFAULT_FROM_EMAIL ='soportecinedot@gmail.com'
PASSWORD_RESET_TIMEOUT = 3600 * 5


# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

print(f"🔍 Django está usando:")
print(f"   Host: {DATABASES['default'].get('HOST', 'SQLite local')}")
print(f"   Database: {DATABASES['default'].get('NAME', 'db.sqlite3')}")